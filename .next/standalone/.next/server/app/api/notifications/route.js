"use strict";(()=>{var t={};t.id=1996,t.ids=[1996],t.modules={38013:t=>{t.exports=require("mongodb")},30517:t=>{t.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9182:(t,e,o)=>{o.r(e),o.d(e,{headerHooks:()=>y,originalPathname:()=>I,patchFetch:()=>S,requestAsyncStorage:()=>g,routeModule:()=>f,serverHooks:()=>w,staticGenerationAsyncStorage:()=>m,staticGenerationBailout:()=>h});var r={};o.r(r),o.d(r,{GET:()=>d,POST:()=>l,PUT:()=>p});var n=o(95419),i=o(69108),a=o(99678),s=o(78070),c=o(22345),u=o(38013);async function d(t){try{let{searchParams:e}=new URL(t.url),o=e.get("userId");if(!o)return s.Z.json({error:"User ID is required"},{status:400});let{db:r}=await (0,c.v)(),n=await r.collection("notifications").find({userId:o,read:!1}).sort({createdAt:-1}).toArray();return s.Z.json(n)}catch(t){return s.Z.json({error:"Failed to fetch notifications"},{status:500})}}async function l(t){try{let{db:e}=await (0,c.v)(),o=await t.json();if(o.sendToAllUsers){let t=await e.collection("users").find({role:{$ne:"Administrator"}}).toArray(),r=t.map(t=>({userId:t._id.toString(),message:o.message,type:o.type||"info",read:!1,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}));return r.length>0&&await e.collection("notifications").insertMany(r),s.Z.json({success:!0,message:`Notification sent to ${t.length} users`})}if(o.userId){let t={userId:o.userId,message:o.message,type:o.type||"info",read:!1,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await e.collection("notifications").insertOne(t),s.Z.json({success:!0,message:"Notification sent successfully"})}return s.Z.json({error:"Invalid request"},{status:400})}catch(t){return s.Z.json({error:"Failed to create notification"},{status:500})}}async function p(t){try{let{db:e}=await (0,c.v)(),o=await t.json();if(!o.notificationId)return s.Z.json({error:"Notification ID is required"},{status:400});return await e.collection("notifications").updateOne({_id:new u.ObjectId(o.notificationId)},{$set:{read:!0,updatedAt:new Date().toISOString()}}),s.Z.json({success:!0,message:"Notification marked as read"})}catch(t){return s.Z.json({error:"Failed to update notification"},{status:500})}}let f=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/notifications/route",pathname:"/api/notifications",filename:"route",bundlePath:"app/api/notifications/route"},resolvedPagePath:"/Users/chakrinaidu/Desktop/Gethomerealty-production/app/api/notifications/route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:g,staticGenerationAsyncStorage:m,serverHooks:w,headerHooks:y,staticGenerationBailout:h}=f,I="/api/notifications/route";function S(){return(0,a.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:m})}},22345:(t,e,o)=>{let r;o.d(e,{v:()=>a});var n=o(38013);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env.local");let i=process.env.MONGODB_URI;async function a(){try{let t=await r;return{db:t.db(),client:t}}catch(t){throw console.error("MongoDB connection error:",t),t}}r=new n.MongoClient(i,{connectTimeoutMS:1e4,socketTimeoutMS:45e3,serverSelectionTimeoutMS:5e3,maxPoolSize:10,retryWrites:!0,retryReads:!0}).connect()}};var e=require("../../../webpack-runtime.js");e.C(t);var o=t=>e(e.s=t),r=e.X(0,[1638,6206],()=>o(9182));module.exports=r})();