"use strict";(()=>{var e={};e.id=5701,e.ids=[5701],e.modules={38013:e=>{e.exports=require("mongodb")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},45341:(e,s,r)=>{r.r(s),r.d(s,{headerHooks:()=>b,originalPathname:()=>O,patchFetch:()=>S,requestAsyncStorage:()=>h,routeModule:()=>w,serverHooks:()=>y,staticGenerationAsyncStorage:()=>f,staticGenerationBailout:()=>j});var o={};r.r(o),r.d(o,{GET:()=>u,POST:()=>v,PUT:()=>g});var i=r(95419),t=r(69108),a=r(99678),n=r(78070),l=r(22345),d=r(38013),m=r(6521),p=r.n(m);let c={dashboard:!1,leads:!1,calendar:!1,email:!1,settings:!1,inventory:!1,favorites:!1,mls:!1};async function u(){try{let{db:e}=await (0,l.v)(),s=(await e.collection("users").find({}).toArray()).map(e=>({...e,permissions:e.permissions||c,password:void 0}));return n.Z.json(s)}catch(e){return n.Z.json({error:"Failed to fetch users"},{status:500})}}async function v(e){try{let{db:s}=await (0,l.v)(),r=await e.json();if(!r.email||!r.password||!r.name)return n.Z.json({error:"Missing required fields"},{status:400});if(await s.collection("users").findOne({email:{$regex:RegExp(`^${r.email}$`,"i")}}))return n.Z.json({error:"Email already exists"},{status:400});r.role||(r.role="User"),r.role=r.role.toLowerCase(),"admin"===r.role||"administrator"===r.role||"Administrator"===r.role?(r.role="Administrator",r.permissions={dashboard:!0,leads:!0,calendar:!0,email:!0,settings:!0,inventory:!0,favorites:!0,mls:!0},console.log("Setting admin role and permissions:",{role:r.role,permissions:r.permissions})):(r.role=r.role.charAt(0).toUpperCase()+r.role.slice(1),r.permissions={dashboard:r.permissions?.dashboard??c.dashboard,leads:r.permissions?.leads??c.leads,calendar:r.permissions?.calendar??c.calendar,email:r.permissions?.email??c.email,settings:r.permissions?.settings??c.settings,inventory:r.permissions?.inventory??c.inventory,favorites:r.permissions?.favorites??c.favorites,mls:r.permissions?.mls??c.mls},console.log("Setting non-admin role and permissions:",{role:r.role,permissions:r.permissions})),r.status=r.status||"active",r.createdAt=new Date().toISOString(),r.updatedAt=new Date().toISOString();let o=await p().genSalt(10);r.password=await p().hash(r.password,o),console.log("Creating user:",{...r,password:"[HIDDEN]"});let i=await s.collection("users").insertOne(r);if(!i.insertedId)throw Error("Failed to create user");let{password:t,...a}=r;return n.Z.json({success:!0,user:{...a,_id:i.insertedId}})}catch(e){return console.error("Error creating user:",e),n.Z.json({error:"Failed to create user"},{status:500})}}async function g(e){try{let{db:s}=await (0,l.v)(),{id:r,...o}=await e.json(),i=await s.collection("users").findOne({_id:new d.ObjectId(r)});if(!i)return n.Z.json({error:"User not found"},{status:404});if(o.password){let e=await p().genSalt(10);o.password=await p().hash(o.password,e)}else delete o.password;o.updatedAt=new Date().toISOString(),o.role?(o.role=o.role.toLowerCase(),console.log("Role update requested:",{newRole:o.role}),"admin"===o.role||"administrator"===o.role?(o.role="Administrator",o.permissions={dashboard:!0,leads:!0,calendar:!0,email:!0,settings:!0,inventory:!0,favorites:!0,mls:!0},console.log("Updated to admin role:",{role:o.role,permissions:o.permissions})):(o.role=o.role.charAt(0).toUpperCase()+o.role.slice(1),o.permissions&&(o.permissions={dashboard:o.permissions.dashboard??i.permissions?.dashboard??c.dashboard,leads:o.permissions.leads??i.permissions?.leads??c.leads,calendar:o.permissions.calendar??i.permissions?.calendar??c.calendar,email:o.permissions.email??i.permissions?.email??c.email,settings:o.permissions.settings??i.permissions?.settings??c.settings,inventory:o.permissions.inventory??i.permissions?.inventory??c.inventory,favorites:o.permissions.favorites??i.permissions?.favorites??c.favorites,mls:o.permissions.mls??i.permissions?.mls??c.mls}))):o.permissions&&(o.permissions={dashboard:o.permissions.dashboard??i.permissions?.dashboard??c.dashboard,leads:o.permissions.leads??i.permissions?.leads??c.leads,calendar:o.permissions.calendar??i.permissions?.calendar??c.calendar,email:o.permissions.email??i.permissions?.email??c.email,settings:o.permissions.settings??i.permissions?.settings??c.settings,inventory:o.permissions.inventory??i.permissions?.inventory??c.inventory,favorites:o.permissions.favorites??i.permissions?.favorites??c.favorites,mls:o.permissions.mls??i.permissions?.mls??c.mls});let t=await s.collection("users").updateOne({_id:new d.ObjectId(r)},{$set:o});if(0===t.matchedCount)return n.Z.json({error:"Failed to update user"},{status:500});let a=await s.collection("users").findOne({_id:new d.ObjectId(r)},{projection:{password:0}});return n.Z.json({success:!0,user:a})}catch(e){return console.error("Error updating user:",e),n.Z.json({error:"Failed to update user"},{status:500})}}let w=new i.AppRouteRouteModule({definition:{kind:t.x.APP_ROUTE,page:"/api/users/route",pathname:"/api/users",filename:"route",bundlePath:"app/api/users/route"},resolvedPagePath:"/Users/chakrinaidu/Desktop/gethomerealty-verson-2/app/api/users/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:h,staticGenerationAsyncStorage:f,serverHooks:y,headerHooks:b,staticGenerationBailout:j}=w,O="/api/users/route";function S(){return(0,a.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:f})}},22345:(e,s,r)=>{let o;r.d(s,{v:()=>a});var i=r(38013);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env.local");let t=process.env.MONGODB_URI;async function a(){try{let e=await o;return{db:e.db(),client:e}}catch(e){throw console.error("MongoDB connection error:",e),e}}o=new i.MongoClient(t,{connectTimeoutMS:1e4,socketTimeoutMS:45e3,serverSelectionTimeoutMS:5e3,maxPoolSize:10,retryWrites:!0,retryReads:!0}).connect()}};var s=require("../../../webpack-runtime.js");s.C(e);var r=e=>s(s.s=e),o=s.X(0,[1638,6206,6521],()=>r(45341));module.exports=o})();