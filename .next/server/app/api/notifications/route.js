"use strict";(()=>{var e={};e.id=1996,e.ids=[1996],e.modules={38013:e=>{e.exports=require("mongodb")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},99395:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>y,originalPathname:()=>I,patchFetch:()=>v,requestAsyncStorage:()=>g,routeModule:()=>p,serverHooks:()=>w,staticGenerationAsyncStorage:()=>m,staticGenerationBailout:()=>h});var o={};r.r(o),r.d(o,{GET:()=>d,POST:()=>l,PUT:()=>f});var n=r(95419),i=r(69108),a=r(99678),s=r(78070),c=r(22345),u=r(38013);async function d(e){try{let{searchParams:t}=new URL(e.url),r=t.get("userId");if(!r)return s.Z.json({error:"User ID is required"},{status:400});let{db:o}=await (0,c.v)(),n=await o.collection("notifications").find({userId:r,read:!1}).sort({createdAt:-1}).toArray();return s.Z.json(n)}catch(e){return s.Z.json({error:"Failed to fetch notifications"},{status:500})}}async function l(e){try{let{db:t}=await (0,c.v)(),r=await e.json();if(r.sendToAllUsers){let e=await t.collection("users").find({role:{$ne:"Administrator"}}).toArray(),o=e.map(e=>({userId:e._id.toString(),message:r.message,type:r.type||"info",read:!1,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}));return o.length>0&&await t.collection("notifications").insertMany(o),s.Z.json({success:!0,message:`Notification sent to ${e.length} users`})}if(r.userId){let e={userId:r.userId,message:r.message,type:r.type||"info",read:!1,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await t.collection("notifications").insertOne(e),s.Z.json({success:!0,message:"Notification sent successfully"})}return s.Z.json({error:"Invalid request"},{status:400})}catch(e){return s.Z.json({error:"Failed to create notification"},{status:500})}}async function f(e){try{let{db:t}=await (0,c.v)(),r=await e.json();if(!r.notificationId)return s.Z.json({error:"Notification ID is required"},{status:400});return await t.collection("notifications").updateOne({_id:new u.ObjectId(r.notificationId)},{$set:{read:!0,updatedAt:new Date().toISOString()}}),s.Z.json({success:!0,message:"Notification marked as read"})}catch(e){return s.Z.json({error:"Failed to update notification"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/notifications/route",pathname:"/api/notifications",filename:"route",bundlePath:"app/api/notifications/route"},resolvedPagePath:"/Users/chakrinaidu/Desktop/gethomerealty-verson-2/app/api/notifications/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:g,staticGenerationAsyncStorage:m,serverHooks:w,headerHooks:y,staticGenerationBailout:h}=p,I="/api/notifications/route";function v(){return(0,a.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:m})}},22345:(e,t,r)=>{let o;r.d(t,{v:()=>a});var n=r(38013);if(!process.env.MONGODB_URI)throw Error("Please add your Mongo URI to .env.local");let i=process.env.MONGODB_URI;async function a(){try{let e=await o;return{db:e.db(),client:e}}catch(e){throw console.error("MongoDB connection error:",e),e}}o=new n.MongoClient(i,{connectTimeoutMS:1e4,socketTimeoutMS:45e3,serverSelectionTimeoutMS:5e3,maxPoolSize:10,retryWrites:!0,retryReads:!0}).connect()}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[1638,6206],()=>r(99395));module.exports=o})();